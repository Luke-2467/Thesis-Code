import Rigidity_Functions as RF
import pyperclip
#genus extra code
'''
satI=saturate(I,Z); V=Proj(R/satI); genus(V)
'''

###Graphs with 4 vertices
#degree 8
G=[4,[[0,1],[1,2],[2,3],[3,0],[1,3]]]
RF.Run_all(G, "ZZ/101","10")

G=[4,[[0,1],[1,2],[2,3],[1,3]]]
RF.Run_all(G, "QQ")

##Graphs with 5 vertices
#degree 16
G=[5,[[0,1],[1,2],[2,3],[3,0],[3,4],[4,2],[4,1]]]
RF.Run_all(G, "ZZ/101",10)

G=[5,[[1,2],[2,3],[3,4],[4,0],[3,0],[2,0],[1,0]]]
RF.Run_all(G, "QQ")

G=[5,[[0,1],[1,4],[1,3],[1,2],[0,4],[0,2],[0,3]]]
RF.Run_all(G, "QQ")

#graphs with 6 vertices
#degree 48
G=[6,[[0,1],[1,2],[2,3],[3,0],[3,4],[4,5],[5,1],[0,5],[4,2]]]
RF.Run_all(G, "QQ")

#degree 32
G=[6,[[0,1],[1,2],[2,3],[3,0],[2,4],[4,1],[3,5],[5,0],[0,2]]]
RF.Run_all(G, "QQ")

G=[6,[[0,1],[1,2],[2,3],[3,0],[3,4],[4,5],[5,1],[5,2],[4,2]]]
RF.Run_all(G, "QQ")

G=[6,[[0,1],[1,2],[2,3],[3,0],[3,4],[4,5],[5,1],[5,3],[4,2]]]
RF.Run_all(G, "QQ")

G=[6,[[0,1],[1,2],[2,3],[3,4],[4,0],[0,3],[3,1],[3,5],[0,5]]]
RF.Run_all(G, "QQ")

G=[6,[[0,1],[1,2],[2,3],[3,4],[4,0],[0,5],[5,2],[5,4],[5,1]]]
RF.Run_all(G, "QQ")

G=[6,[[0,1],[1,3],[3,5],[5,4],[4,1],[4,2],[2,0],[0,5],[3,2]]]
RF.Run_all(G, "QQ")

### 7 vertices
#96
G=[7,[[0,1],[1,2],[2,3],[3,0],[3,4],[4,5],[5,1],[0,5],[4,2],[1,6],[5,6]]]
RF.Run_all(G, "QQ")

G=[7,[[0,1],[1,2],[2,3],[3,0],[3,4],[4,5],[5,1],[4,2],[0,6],[6,5],[6,1]]]
RF.Run_all(G, "QQ")

G=[7,[[0,1],[1,2],[2,3],[3,0],[2,6],[3,4],[4,0],[6,5],[5,1],[5,0]]]
RF.Run_all(G, "QQ")

G=[7,[[0,1],[1,2],[2,3],[3,0],[4,5],[5,1],[0,5],[4,2],[4,6],[6,3],[6,2]]]
RF.Run_all(G, "QQ")

#128

G=[7,[[0,1],[1,2],[2,3],[3,0],[0,5],[0,4],[3,4],[4,6],[6,5],[5,1],[6,2]]]
RF.Run_all(G, "QQ")
